definitions:
  controllers.requestProducts:
    properties:
      description:
        type: string
      expiration_rate:
        type: integer
      freezing_rate:
        type: integer
      height:
        type: number
      length:
        type: number
      netweight:
        type: number
      product_code:
        type: string
      product_type_id:
        type: integer
      recommended_freezing_temperature:
        type: number
      seller_id:
        type: integer
      width:
        type: number
    required:
    - description
    - expiration_rate
    - freezing_rate
    - height
    - length
    - netweight
    - product_code
    - product_type_id
    - recommended_freezing_temperature
    - seller_id
    - width
    type: object
  schemes.JSONBadReqResult:
    properties:
      error: {}
    type: object
  schemes.JSONSuccessResult:
    properties:
      data: {}
    type: object
  schemes.Product:
    properties:
      description:
        type: string
      expiration_rate:
        type: integer
      freezing_rate:
        type: integer
      height:
        type: number
      id:
        type: integer
      length:
        type: number
      netweight:
        type: number
      product_code:
        type: string
      product_type_id:
        type: integer
      recommended_freezing_temperature:
        type: number
      seller_id:
        type: integer
      width:
        type: number
    type: object
host: localhost:8080
info:
  contact:
    name: API Support
    url: https://developers.mercadolibre.com.ar/support
  description: This API Handle MELI Products.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: https://developers.mercadolibre.com.ar/es_ar/terminos-y-condiciones
  title: MERCADO FRESCOS
  version: "1.0"
paths:
  /products:
    get:
      consumes:
      - application/json
      description: get all products
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/schemes.JSONSuccessResult'
            - properties:
                data:
                  $ref: '#/definitions/schemes.Product'
              type: object
        "404":
          description: Not Found
          schema:
            allOf:
            - $ref: '#/definitions/schemes.JSONBadReqResult'
            - properties:
                error:
                  type: string
              type: object
      summary: List products
      tags:
      - Products
    post:
      consumes:
      - application/json
      description: Add a new product to the list
      parameters:
      - description: Product to create
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/controllers.requestProducts'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/schemes.JSONSuccessResult'
            - properties:
                data:
                  $ref: '#/definitions/schemes.Product'
              type: object
        "404":
          description: Not Found
          schema:
            allOf:
            - $ref: '#/definitions/schemes.JSONBadReqResult'
            - properties:
                error:
                  type: string
              type: object
        "422":
          description: Unprocessable Entity
          schema:
            allOf:
            - $ref: '#/definitions/schemes.JSONBadReqResult'
            - properties:
                error:
                  type: string
              type: object
      summary: Create product
      tags:
      - Products
  /products/{id}:
    delete:
      consumes:
      - application/json
      description: Delete existing product in list
      parameters:
      - description: product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            allOf:
            - $ref: '#/definitions/schemes.JSONSuccessResult'
            - properties:
                data:
                  $ref: '#/definitions/schemes.Product'
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/schemes.JSONBadReqResult'
            - properties:
                error:
                  type: string
              type: object
        "404":
          description: Not Found
          schema:
            allOf:
            - $ref: '#/definitions/schemes.JSONBadReqResult'
            - properties:
                error:
                  type: string
              type: object
      summary: Delete product
      tags:
      - Products
    get:
      consumes:
      - application/json
      description: get product by it's id
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/schemes.JSONSuccessResult'
            - properties:
                data:
                  $ref: '#/definitions/schemes.Product'
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/schemes.JSONBadReqResult'
            - properties:
                error:
                  type: string
              type: object
        "404":
          description: Not Found
          schema:
            allOf:
            - $ref: '#/definitions/schemes.JSONBadReqResult'
            - properties:
                error:
                  type: string
              type: object
      summary: Product by id
      tags:
      - Products
    patch:
      consumes:
      - application/json
      description: Update existing product in list
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      - description: Product to update
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/controllers.requestProducts'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/schemes.JSONSuccessResult'
            - properties:
                data:
                  $ref: '#/definitions/schemes.Product'
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/schemes.JSONBadReqResult'
            - properties:
                error:
                  type: string
              type: object
        "404":
          description: Not Found
          schema:
            allOf:
            - $ref: '#/definitions/schemes.JSONBadReqResult'
            - properties:
                error:
                  type: string
              type: object
      summary: Update product
      tags:
      - Products
swagger: "2.0"
