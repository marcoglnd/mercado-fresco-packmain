// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/marcoglnd/mercado-fresco-packmain/internal/purchase-orders/domain"
	mock "github.com/stretchr/testify/mock"
)

// PurchaseOrderService is an autogenerated mock type for the PurchaseOrderService type
type PurchaseOrderService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, orderNumber, orderDate, trackingCode, buyerId, carrierId, orderStatusId, warehouseId
func (_m *PurchaseOrderService) Create(ctx context.Context, orderNumber string, orderDate string, trackingCode string, buyerId int64, carrierId int64, orderStatusId int64, warehouseId int64) (*domain.PurchaseOrder, error) {
	ret := _m.Called(ctx, orderNumber, orderDate, trackingCode, buyerId, carrierId, orderStatusId, warehouseId)

	var r0 *domain.PurchaseOrder
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, int64, int64, int64, int64) *domain.PurchaseOrder); ok {
		r0 = rf(ctx, orderNumber, orderDate, trackingCode, buyerId, carrierId, orderStatusId, warehouseId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PurchaseOrder)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, int64, int64, int64, int64) error); ok {
		r1 = rf(ctx, orderNumber, orderDate, trackingCode, buyerId, carrierId, orderStatusId, warehouseId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPurchaseOrderService interface {
	mock.TestingT
	Cleanup(func())
}

// NewPurchaseOrderService creates a new instance of PurchaseOrderService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPurchaseOrderService(t mockConstructorTestingTNewPurchaseOrderService) *PurchaseOrderService {
	mock := &PurchaseOrderService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
