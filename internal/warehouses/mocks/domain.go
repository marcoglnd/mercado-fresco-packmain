// Code generated by MockGen. DO NOT EDIT.
// Source: ./domain.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/marcoglnd/mercado-fresco-packmain/internal/warehouses/domain"
)

// MockWarehouseRepository is a mock of WarehouseRepository interface.
type MockWarehouseRepository struct {
	ctrl     *gomock.Controller
	recorder *MockWarehouseRepositoryMockRecorder
}

// MockWarehouseRepositoryMockRecorder is the mock recorder for MockWarehouseRepository.
type MockWarehouseRepositoryMockRecorder struct {
	mock *MockWarehouseRepository
}

// NewMockWarehouseRepository creates a new mock instance.
func NewMockWarehouseRepository(ctrl *gomock.Controller) *MockWarehouseRepository {
	mock := &MockWarehouseRepository{ctrl: ctrl}
	mock.recorder = &MockWarehouseRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWarehouseRepository) EXPECT() *MockWarehouseRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockWarehouseRepository) Create(ctx context.Context, warehouse *domain.Warehouse) (*domain.Warehouse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, warehouse)
	ret0, _ := ret[0].(*domain.Warehouse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockWarehouseRepositoryMockRecorder) Create(ctx, warehouse interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockWarehouseRepository)(nil).Create), ctx, warehouse)
}

// Delete mocks base method.
func (m *MockWarehouseRepository) Delete(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockWarehouseRepositoryMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockWarehouseRepository)(nil).Delete), ctx, id)
}

// FindById mocks base method.
func (m *MockWarehouseRepository) FindById(ctx context.Context, id int64) (*domain.Warehouse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", ctx, id)
	ret0, _ := ret[0].(*domain.Warehouse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockWarehouseRepositoryMockRecorder) FindById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockWarehouseRepository)(nil).FindById), ctx, id)
}

// FindByWarehouseCode mocks base method.
func (m *MockWarehouseRepository) FindByWarehouseCode(ctx context.Context, warehouseCode string) (*domain.Warehouse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByWarehouseCode", ctx, warehouseCode)
	ret0, _ := ret[0].(*domain.Warehouse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByWarehouseCode indicates an expected call of FindByWarehouseCode.
func (mr *MockWarehouseRepositoryMockRecorder) FindByWarehouseCode(ctx, warehouseCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByWarehouseCode", reflect.TypeOf((*MockWarehouseRepository)(nil).FindByWarehouseCode), ctx, warehouseCode)
}

// GetAll mocks base method.
func (m *MockWarehouseRepository) GetAll(ctx context.Context) (*[]domain.Warehouse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].(*[]domain.Warehouse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockWarehouseRepositoryMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockWarehouseRepository)(nil).GetAll), ctx)
}

// Update mocks base method.
func (m *MockWarehouseRepository) Update(ctx context.Context, warehouse *domain.Warehouse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, warehouse)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockWarehouseRepositoryMockRecorder) Update(ctx, warehouse interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockWarehouseRepository)(nil).Update), ctx, warehouse)
}

// MockWarehouseService is a mock of WarehouseService interface.
type MockWarehouseService struct {
	ctrl     *gomock.Controller
	recorder *MockWarehouseServiceMockRecorder
}

// MockWarehouseServiceMockRecorder is the mock recorder for MockWarehouseService.
type MockWarehouseServiceMockRecorder struct {
	mock *MockWarehouseService
}

// NewMockWarehouseService creates a new mock instance.
func NewMockWarehouseService(ctrl *gomock.Controller) *MockWarehouseService {
	mock := &MockWarehouseService{ctrl: ctrl}
	mock.recorder = &MockWarehouseServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWarehouseService) EXPECT() *MockWarehouseServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockWarehouseService) Create(ctx context.Context, warehouse *domain.Warehouse) (*domain.Warehouse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, warehouse)
	ret0, _ := ret[0].(*domain.Warehouse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockWarehouseServiceMockRecorder) Create(ctx, warehouse interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockWarehouseService)(nil).Create), ctx, warehouse)
}

// Delete mocks base method.
func (m *MockWarehouseService) Delete(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockWarehouseServiceMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockWarehouseService)(nil).Delete), ctx, id)
}

// FindById mocks base method.
func (m *MockWarehouseService) FindById(ctx context.Context, id int64) (*domain.Warehouse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", ctx, id)
	ret0, _ := ret[0].(*domain.Warehouse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockWarehouseServiceMockRecorder) FindById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockWarehouseService)(nil).FindById), ctx, id)
}

// FindByWarehouseCode mocks base method.
func (m *MockWarehouseService) FindByWarehouseCode(ctx context.Context, warehouseCode string) (*domain.Warehouse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByWarehouseCode", ctx, warehouseCode)
	ret0, _ := ret[0].(*domain.Warehouse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByWarehouseCode indicates an expected call of FindByWarehouseCode.
func (mr *MockWarehouseServiceMockRecorder) FindByWarehouseCode(ctx, warehouseCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByWarehouseCode", reflect.TypeOf((*MockWarehouseService)(nil).FindByWarehouseCode), ctx, warehouseCode)
}

// GetAll mocks base method.
func (m *MockWarehouseService) GetAll(ctx context.Context) (*[]domain.Warehouse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].(*[]domain.Warehouse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockWarehouseServiceMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockWarehouseService)(nil).GetAll), ctx)
}

// IsWarehouseCodeAvailable mocks base method.
func (m *MockWarehouseService) IsWarehouseCodeAvailable(ctx context.Context, warehouseCode string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsWarehouseCodeAvailable", ctx, warehouseCode)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsWarehouseCodeAvailable indicates an expected call of IsWarehouseCodeAvailable.
func (mr *MockWarehouseServiceMockRecorder) IsWarehouseCodeAvailable(ctx, warehouseCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsWarehouseCodeAvailable", reflect.TypeOf((*MockWarehouseService)(nil).IsWarehouseCodeAvailable), ctx, warehouseCode)
}

// Update mocks base method.
func (m *MockWarehouseService) Update(ctx context.Context, warehouse *domain.Warehouse) (*domain.Warehouse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, warehouse)
	ret0, _ := ret[0].(*domain.Warehouse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockWarehouseServiceMockRecorder) Update(ctx, warehouse interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockWarehouseService)(nil).Update), ctx, warehouse)
}
