// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository.go

// Package mock_warehouses is a generated GoMock package.
package mock_warehouses

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	warehouses "github.com/marcoglnd/mercado-fresco-packmain/internal/warehouses"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepository) Create(warehouseCode, address, telephone string, minimumCapacity, minimumTemperature int) (*warehouses.Warehouse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", warehouseCode, address, telephone, minimumCapacity, minimumTemperature)
	ret0, _ := ret[0].(*warehouses.Warehouse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(warehouseCode, address, telephone, minimumCapacity, minimumTemperature interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), warehouseCode, address, telephone, minimumCapacity, minimumTemperature)
}

// Delete mocks base method.
func (m *MockRepository) Delete(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRepositoryMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), id)
}

// FindById mocks base method.
func (m *MockRepository) FindById(id int) (*warehouses.Warehouse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", id)
	ret0, _ := ret[0].(*warehouses.Warehouse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockRepositoryMockRecorder) FindById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockRepository)(nil).FindById), id)
}

// FindByWarehouseCode mocks base method.
func (m *MockRepository) FindByWarehouseCode(warehouseCode string) (*warehouses.Warehouse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByWarehouseCode", warehouseCode)
	ret0, _ := ret[0].(*warehouses.Warehouse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByWarehouseCode indicates an expected call of FindByWarehouseCode.
func (mr *MockRepositoryMockRecorder) FindByWarehouseCode(warehouseCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByWarehouseCode", reflect.TypeOf((*MockRepository)(nil).FindByWarehouseCode), warehouseCode)
}

// GetAll mocks base method.
func (m *MockRepository) GetAll() ([]warehouses.Warehouse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]warehouses.Warehouse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockRepository)(nil).GetAll))
}

// Update mocks base method.
func (m *MockRepository) Update(warehouse *warehouses.Warehouse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", warehouse)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRepositoryMockRecorder) Update(warehouse interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), warehouse)
}
