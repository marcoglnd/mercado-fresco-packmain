// Code generated by MockGen. DO NOT EDIT.
// Source: ./domain.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/marcoglnd/mercado-fresco-packmain/internal/carriers/domain"
)

// MockCarrierRepository is a mock of CarrierRepository interface.
type MockCarrierRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCarrierRepositoryMockRecorder
}

// MockCarrierRepositoryMockRecorder is the mock recorder for MockCarrierRepository.
type MockCarrierRepositoryMockRecorder struct {
	mock *MockCarrierRepository
}

// NewMockCarrierRepository creates a new mock instance.
func NewMockCarrierRepository(ctrl *gomock.Controller) *MockCarrierRepository {
	mock := &MockCarrierRepository{ctrl: ctrl}
	mock.recorder = &MockCarrierRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCarrierRepository) EXPECT() *MockCarrierRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCarrierRepository) Create(ctx context.Context, carrier *domain.Carrier) (*domain.Carrier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, carrier)
	ret0, _ := ret[0].(*domain.Carrier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCarrierRepositoryMockRecorder) Create(ctx, carrier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCarrierRepository)(nil).Create), ctx, carrier)
}

// FindByCid mocks base method.
func (m *MockCarrierRepository) FindByCid(ctx context.Context, cid string) (*domain.Carrier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByCid", ctx, cid)
	ret0, _ := ret[0].(*domain.Carrier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByCid indicates an expected call of FindByCid.
func (mr *MockCarrierRepositoryMockRecorder) FindByCid(ctx, cid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByCid", reflect.TypeOf((*MockCarrierRepository)(nil).FindByCid), ctx, cid)
}

// FindById mocks base method.
func (m *MockCarrierRepository) FindById(ctx context.Context, id int64) (*domain.Carrier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", ctx, id)
	ret0, _ := ret[0].(*domain.Carrier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockCarrierRepositoryMockRecorder) FindById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockCarrierRepository)(nil).FindById), ctx, id)
}

// GetAll mocks base method.
func (m *MockCarrierRepository) GetAll(ctx context.Context) (*[]domain.Carrier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].(*[]domain.Carrier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockCarrierRepositoryMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockCarrierRepository)(nil).GetAll), ctx)
}

// GetAllCarriersReport mocks base method.
func (m *MockCarrierRepository) GetAllCarriersReport(ctx context.Context) (*[]domain.CarrierReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCarriersReport", ctx)
	ret0, _ := ret[0].(*[]domain.CarrierReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCarriersReport indicates an expected call of GetAllCarriersReport.
func (mr *MockCarrierRepositoryMockRecorder) GetAllCarriersReport(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCarriersReport", reflect.TypeOf((*MockCarrierRepository)(nil).GetAllCarriersReport), ctx)
}

// GetCarriersReportById mocks base method.
func (m *MockCarrierRepository) GetCarriersReportById(ctx context.Context, id int64) (*domain.CarrierReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCarriersReportById", ctx, id)
	ret0, _ := ret[0].(*domain.CarrierReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCarriersReportById indicates an expected call of GetCarriersReportById.
func (mr *MockCarrierRepositoryMockRecorder) GetCarriersReportById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCarriersReportById", reflect.TypeOf((*MockCarrierRepository)(nil).GetCarriersReportById), ctx, id)
}

// MockCarrierService is a mock of CarrierService interface.
type MockCarrierService struct {
	ctrl     *gomock.Controller
	recorder *MockCarrierServiceMockRecorder
}

// MockCarrierServiceMockRecorder is the mock recorder for MockCarrierService.
type MockCarrierServiceMockRecorder struct {
	mock *MockCarrierService
}

// NewMockCarrierService creates a new mock instance.
func NewMockCarrierService(ctrl *gomock.Controller) *MockCarrierService {
	mock := &MockCarrierService{ctrl: ctrl}
	mock.recorder = &MockCarrierServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCarrierService) EXPECT() *MockCarrierServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCarrierService) Create(ctx context.Context, carrier *domain.Carrier) (*domain.Carrier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, carrier)
	ret0, _ := ret[0].(*domain.Carrier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCarrierServiceMockRecorder) Create(ctx, carrier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCarrierService)(nil).Create), ctx, carrier)
}

// FindByCid mocks base method.
func (m *MockCarrierService) FindByCid(ctx context.Context, cid string) (*domain.Carrier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByCid", ctx, cid)
	ret0, _ := ret[0].(*domain.Carrier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByCid indicates an expected call of FindByCid.
func (mr *MockCarrierServiceMockRecorder) FindByCid(ctx, cid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByCid", reflect.TypeOf((*MockCarrierService)(nil).FindByCid), ctx, cid)
}

// FindById mocks base method.
func (m *MockCarrierService) FindById(ctx context.Context, id int64) (*domain.Carrier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", ctx, id)
	ret0, _ := ret[0].(*domain.Carrier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockCarrierServiceMockRecorder) FindById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockCarrierService)(nil).FindById), ctx, id)
}

// GetAllCarriersReport mocks base method.
func (m *MockCarrierService) GetAllCarriersReport(ctx context.Context) (*[]domain.CarrierReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCarriersReport", ctx)
	ret0, _ := ret[0].(*[]domain.CarrierReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCarriersReport indicates an expected call of GetAllCarriersReport.
func (mr *MockCarrierServiceMockRecorder) GetAllCarriersReport(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCarriersReport", reflect.TypeOf((*MockCarrierService)(nil).GetAllCarriersReport), ctx)
}

// GetCarriersReportById mocks base method.
func (m *MockCarrierService) GetCarriersReportById(ctx context.Context, id int64) (*domain.CarrierReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCarriersReportById", ctx, id)
	ret0, _ := ret[0].(*domain.CarrierReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCarriersReportById indicates an expected call of GetCarriersReportById.
func (mr *MockCarrierServiceMockRecorder) GetCarriersReportById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCarriersReportById", reflect.TypeOf((*MockCarrierService)(nil).GetCarriersReportById), ctx, id)
}

// IsCidAvailable mocks base method.
func (m *MockCarrierService) IsCidAvailable(ctx context.Context, cid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCidAvailable", ctx, cid)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsCidAvailable indicates an expected call of IsCidAvailable.
func (mr *MockCarrierServiceMockRecorder) IsCidAvailable(ctx, cid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCidAvailable", reflect.TypeOf((*MockCarrierService)(nil).IsCidAvailable), ctx, cid)
}
