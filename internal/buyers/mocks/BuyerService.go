// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/marcoglnd/mercado-fresco-packmain/internal/buyers/domain"
	mock "github.com/stretchr/testify/mock"
)

// BuyerService is an autogenerated mock type for the BuyerService type
type BuyerService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, cardNumberId, firstName, lastName
func (_m *BuyerService) Create(ctx context.Context, cardNumberId string, firstName string, lastName string) (*domain.Buyer, error) {
	ret := _m.Called(ctx, cardNumberId, firstName, lastName)

	var r0 *domain.Buyer
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *domain.Buyer); ok {
		r0 = rf(ctx, cardNumberId, firstName, lastName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Buyer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, cardNumberId, firstName, lastName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *BuyerService) Delete(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: ctx
func (_m *BuyerService) GetAll(ctx context.Context) (*[]domain.Buyer, error) {
	ret := _m.Called(ctx)

	var r0 *[]domain.Buyer
	if rf, ok := ret.Get(0).(func(context.Context) *[]domain.Buyer); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]domain.Buyer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: ctx, id
func (_m *BuyerService) GetById(ctx context.Context, id int64) (*domain.Buyer, error) {
	ret := _m.Called(ctx, id)

	var r0 *domain.Buyer
	if rf, ok := ret.Get(0).(func(context.Context, int64) *domain.Buyer); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Buyer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, id, cardNumberId, firstName, lastName
func (_m *BuyerService) Update(ctx context.Context, id int64, cardNumberId string, firstName string, lastName string) (*domain.Buyer, error) {
	ret := _m.Called(ctx, id, cardNumberId, firstName, lastName)

	var r0 *domain.Buyer
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, string, string) *domain.Buyer); ok {
		r0 = rf(ctx, id, cardNumberId, firstName, lastName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Buyer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, string, string, string) error); ok {
		r1 = rf(ctx, id, cardNumberId, firstName, lastName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewBuyerService interface {
	mock.TestingT
	Cleanup(func())
}

// NewBuyerService creates a new instance of BuyerService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBuyerService(t mockConstructorTestingTNewBuyerService) *BuyerService {
	mock := &BuyerService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
