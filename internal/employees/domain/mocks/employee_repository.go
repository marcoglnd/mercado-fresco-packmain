// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/marcoglnd/mercado-fresco-packmain/internal/employees/domain"
	mock "github.com/stretchr/testify/mock"
)

// EmployeeRepository is an autogenerated mock type for the EmployeeRepository type
type EmployeeRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, employee
func (_m *EmployeeRepository) Create(ctx context.Context, employee *domain.Employee) (*domain.Employee, error) {
	ret := _m.Called(ctx, employee)

	var r0 *domain.Employee
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Employee) *domain.Employee); ok {
		r0 = rf(ctx, employee)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Employee)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Employee) error); ok {
		r1 = rf(ctx, employee)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *EmployeeRepository) Delete(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: ctx
func (_m *EmployeeRepository) GetAll(ctx context.Context) (*[]domain.Employee, error) {
	ret := _m.Called(ctx)

	var r0 *[]domain.Employee
	if rf, ok := ret.Get(0).(func(context.Context) *[]domain.Employee); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]domain.Employee)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByCardNumberId provides a mock function with given fields: ctx, cardNumberId
func (_m *EmployeeRepository) GetByCardNumberId(ctx context.Context, cardNumberId string) (*domain.Employee, error) {
	ret := _m.Called(ctx, cardNumberId)

	var r0 *domain.Employee
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Employee); ok {
		r0 = rf(ctx, cardNumberId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Employee)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, cardNumberId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: ctx, id
func (_m *EmployeeRepository) GetById(ctx context.Context, id int64) (*domain.Employee, error) {
	ret := _m.Called(ctx, id)

	var r0 *domain.Employee
	if rf, ok := ret.Get(0).(func(context.Context, int64) *domain.Employee); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Employee)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, employee
func (_m *EmployeeRepository) Update(ctx context.Context, employee *domain.Employee) (*domain.Employee, error) {
	ret := _m.Called(ctx, employee)

	var r0 *domain.Employee
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Employee) *domain.Employee); ok {
		r0 = rf(ctx, employee)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Employee)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Employee) error); ok {
		r1 = rf(ctx, employee)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewEmployeeRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewEmployeeRepository creates a new instance of EmployeeRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEmployeeRepository(t mockConstructorTestingTNewEmployeeRepository) *EmployeeRepository {
	mock := &EmployeeRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
